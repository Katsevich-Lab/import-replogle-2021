labels = paste0(ifelse(non_targeting[1], "non-targeting_", "targeting"), "vector_", seq_along(unique(vector_id)))))
x <- grna_table_updated |>
mutate(non_targeting = (grna_target == "non-targeting")) |>
group_by(non_targeting) |>
mutate(vector_id_2 = factor(vector_id,
levels = unique(vector_id),
labels = paste0(ifelse(non_targeting[1], "non-targeting_", "targeting"),
"vector_", seq_along(unique(vector_id)))))
x
x <- grna_table_updated |>
mutate(non_targeting = (grna_target == "non-targeting")) |>
group_by(non_targeting) |>
mutate(vector_id_2 = factor(vector_id,
levels = unique(vector_id),
labels = paste0(ifelse(non_targeting[1], "non-targeting_", "targeting_"),
"vector_", seq_along(unique(vector_id)))))
x
x <- grna_table_updated |>
mutate(non_targeting = (grna_target == "non-targeting")) |>
group_by(non_targeting) |>
mutate(vector_id_2 = factor(vector_id,
levels = unique(vector_id),
labels = paste0(ifelse(non_targeting[1], "non-targeting_", "targeting_"),
"vector_", seq_along(unique(vector_id)))))
x
x[100:110]
x[100:110,]
x[100:110,]
x[1000:1010,]
x |> filter(non_targeting)
x |> filter(non_targeting) |> arrange(vector_id_2)
x <- grna_table_updated |>
mutate(non_targeting = (grna_target == "non-targeting")) |>
group_by(non_targeting) |>
mutate(vector_id_2 = factor(vector_id,
levels = unique(vector_id),
labels = paste0(ifelse(non_targeting[1], "non-targeting_", "targeting_"),
"vector_", seq_along(unique(vector_id))))) |>
arrange(vector_id_2)
x
tail(x)
x <- grna_table_updated |>
mutate(non_targeting = (grna_target == "non-targeting")) |>
group_by(non_targeting) |>
mutate(vector_id_2 = factor(vector_id,
levels = unique(vector_id),
labels = paste0(ifelse(non_targeting[1], "non-targeting_", "targeting_"),
"vector_", seq_along(unique(vector_id))))) |>
arrange(vector_id_2) |>
ungroup()
x
tail(x)
tail(x, 50)
x <- grna_table_updated |>
mutate(non_targeting = (grna_target == "non-targeting")) |>
group_by(non_targeting) |>
mutate(vector_id_2 = factor(vector_id,
levels = unique(vector_id),
labels = paste0(ifelse(non_targeting[1], "non-targeting_", "targeting_"),
"vector_", seq_along(unique(vector_id))))) |>
arrange(vector_id_2) |>
ungroup() |>
mutate(non_targeting = NULL)
x
x <- grna_table_updated |>
mutate(non_targeting = (grna_target == "non-targeting")) |>
group_by(non_targeting) |>
mutate(vector_id_2 = factor(vector_id,
levels = unique(vector_id),
labels = paste0(ifelse(non_targeting[1], "non-targeting_", "targeting_"),
"vector_", seq_along(unique(vector_id))))) |>
arrange(vector_id_2) |>
ungroup() |>
mutate(non_targeting = NULL, vector_id = NULL)
x
x <- grna_table_updated |>
mutate(non_targeting = (grna_target == "non-targeting")) |>
group_by(non_targeting) |>
mutate(vector_id_2 = factor(vector_id,
levels = unique(vector_id),
labels = paste0(ifelse(non_targeting[1], "non-targeting_", "targeting_"),
"vector_", seq_along(unique(vector_id))))) |>
arrange(vector_id_2) |>
ungroup() |>
mutate(non_targeting = NULL, vector_id = NULL) |>
rename("vector_id" = "vector_id_2")
x
x |> filter(vector_id == "unknown")
x |> filter(grna_target ==
"unknown")
x
head(x)
tail(X)
x
x
grna_table_updated
x <- grna_table_updated |> filter(grna_target != "non-targeting")
x
x | dplyr::filter(grna_target == "non-targeting")
x | dplyr::filter(grna == "non-targeting")
x | dplyr::filter(grna_target == "non-targeting")
x <- grna_table_updated |> filter(grna_target != "unknown")
x
head(X)
head(x)
tail(x)
nrow(x)
x
x$vector_id |> unique() |> length()
x
grna_table_final <- rbind(
x, grna_table_updated |> filter(grna_target == "unknown")
)
grna_table_final
head(grna_table_final)
head(grna_table_final, 100)
x <- grna_table_updated |> filter(grna_target != "unknown")
x
x <- grna_table_updated |> filter(grna_target != "unknown")
mutate(non_targeting = (grna_target == "non-targeting")) |>
group_by(non_targeting) |>
mutate(vector_id_2 = factor(vector_id,
levels = unique(vector_id),
labels = paste0(ifelse(non_targeting[1], "non-targeting_", "targeting_"),
"vector_", seq_along(unique(vector_id))))) |>
arrange(vector_id_2) |>
ungroup() |>
mutate(non_targeting = NULL, vector_id = NULL)
conflicts_prefer(dplyr::filter)
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2022_DATA_DIR"))
vector_info_table <- readxl::read_xlsx(path = paste0(repl_offsite, "raw/mmc1.xlsx"), sheet = 3,
col_names = c("vector_id", "gene_name", "transcript", "grna_target", "grna_a", "target_sequence_a",
"grna_b", "target_sequence_b", "duplicated", "either_duplicated"), skip = 1) |>
select(vector_id, grna_target, grna_a, grna_b)
vector_info_table$grna_a <- paste0(vector_info_table$grna_a, "_posA")
vector_info_table$grna_b <- paste0(vector_info_table$grna_b, "_posB")
feature_table <- data.table::fread(input = paste0(repl_offsite, "raw/rd7/rpe1_other/batch_1/RD7_1_features.tsv.gz"),
col.names = c("grna_id", "name", "modality"))
grna_table <- feature_table |> filter(modality == "CRISPR Guide Capture") |> dplyr::select(grna_id)
# reshape vector_info_table
vector_info_table_reshape <- vector_info_table |>
pivot_longer(cols = c("grna_a", "grna_b"), values_to = "grna_id", names_to = NULL)
grna_table_updated <- left_join(x = grna_table, y = vector_info_table_reshape, by = "grna_id") |>
dplyr::arrange(grna_id)
grna_table_updated$grna_target[is.na(grna_table_updated$grna_target)] <- "unknown"
grna_table_updated$vector_id[is.na(grna_table_updated$vector_id)] <- "unknown"
x <- grna_table_updated |> filter(grna_target != "unknown")
mutate(non_targeting = (grna_target == "non-targeting")) |>
group_by(non_targeting) |>
mutate(vector_id_2 = factor(vector_id,
levels = unique(vector_id),
labels = paste0(ifelse(non_targeting[1], "non-targeting_", "targeting_"),
"vector_", seq_along(unique(vector_id))))) |>
arrange(vector_id_2) |>
ungroup() |>
mutate(non_targeting = NULL, vector_id = NULL)
conflicts_prefer(dplyr::filter)
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2022_DATA_DIR"))
vector_info_table <- readxl::read_xlsx(path = paste0(repl_offsite, "raw/mmc1.xlsx"), sheet = 3,
col_names = c("vector_id", "gene_name", "transcript", "grna_target", "grna_a", "target_sequence_a",
"grna_b", "target_sequence_b", "duplicated", "either_duplicated"), skip = 1) |>
select(vector_id, grna_target, grna_a, grna_b)
vector_info_table$grna_a <- paste0(vector_info_table$grna_a, "_posA")
vector_info_table$grna_b <- paste0(vector_info_table$grna_b, "_posB")
feature_table <- data.table::fread(input = paste0(repl_offsite, "raw/rd7/rpe1_other/batch_1/RD7_1_features.tsv.gz"),
col.names = c("grna_id", "name", "modality"))
grna_table <- feature_table |> filter(modality == "CRISPR Guide Capture") |> dplyr::select(grna_id)
# reshape vector_info_table
vector_info_table_reshape <- vector_info_table |>
pivot_longer(cols = c("grna_a", "grna_b"), values_to = "grna_id", names_to = NULL)
grna_table_updated <- left_join(x = grna_table, y = vector_info_table_reshape, by = "grna_id") |>
dplyr::arrange(grna_id)
grna_table_updated$grna_target[is.na(grna_table_updated$grna_target)] <- "unknown"
grna_table_updated$vector_id[is.na(grna_table_updated$vector_id)] <- "unknown"
x <- grna_table_updated |> filter(grna_target != "unknown")
mutate(non_targeting = (grna_target == "non-targeting")) |>
group_by(non_targeting) |>
mutate(vector_id_2 = factor(vector_id,
levels = unique(vector_id),
labels = paste0(ifelse(non_targeting[1], "non-targeting_", "targeting_"),
"vector_", seq_along(unique(vector_id))))) |>
arrange(vector_id_2) |>
ungroup() |>
mutate(non_targeting = NULL, vector_id = NULL)
conflicts_prefer(dplyr::filter)
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2022_DATA_DIR"))
vector_info_table <- readxl::read_xlsx(path = paste0(repl_offsite, "raw/mmc1.xlsx"), sheet = 3,
col_names = c("vector_id", "gene_name", "transcript", "grna_target", "grna_a", "target_sequence_a",
"grna_b", "target_sequence_b", "duplicated", "either_duplicated"), skip = 1) |>
select(vector_id, grna_target, grna_a, grna_b)
vector_info_table$grna_a <- paste0(vector_info_table$grna_a, "_posA")
vector_info_table$grna_b <- paste0(vector_info_table$grna_b, "_posB")
feature_table <- data.table::fread(input = paste0(repl_offsite, "raw/rd7/rpe1_other/batch_1/RD7_1_features.tsv.gz"),
col.names = c("grna_id", "name", "modality"))
grna_table <- feature_table |> filter(modality == "CRISPR Guide Capture") |> dplyr::select(grna_id)
# reshape vector_info_table
vector_info_table_reshape <- vector_info_table |>
pivot_longer(cols = c("grna_a", "grna_b"), values_to = "grna_id", names_to = NULL)
grna_table_updated <- left_join(x = grna_table, y = vector_info_table_reshape, by = "grna_id") |>
dplyr::arrange(grna_id)
grna_table_updated$grna_target[is.na(grna_table_updated$grna_target)] <- "unknown"
grna_table_updated$vector_id[is.na(grna_table_updated$vector_id)] <- "unknown"
x <- grna_table_updated |> filter(grna_target != "unknown")
mutate(non_targeting = (grna_target == "non-targeting")) |>
group_by(non_targeting) |>
mutate(vector_id_2 = factor(vector_id,
levels = unique(vector_id),
labels = paste0(ifelse(non_targeting[1], "non-targeting_", "targeting_"),
"vector_", seq_along(unique(vector_id))))) |>
arrange(vector_id_2)
library(tidyverse)
conflicts_prefer(dplyr::filter)
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2022_DATA_DIR"))
library(tidyverse)
conflicts_prefer(dplyr::filter)
source("~/.Rprofile")
library(tidyverse)
conflicts_prefer(dplyr::filter)
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2022_DATA_DIR"))
vector_info_table <- readxl::read_xlsx(path = paste0(repl_offsite, "raw/mmc1.xlsx"), sheet = 3,
col_names = c("vector_id", "gene_name", "transcript", "grna_target", "grna_a", "target_sequence_a",
"grna_b", "target_sequence_b", "duplicated", "either_duplicated"), skip = 1) |>
select(vector_id, grna_target, grna_a, grna_b)
vector_info_table$grna_a <- paste0(vector_info_table$grna_a, "_posA")
vector_info_table$grna_b <- paste0(vector_info_table$grna_b, "_posB")
feature_table <- data.table::fread(input = paste0(repl_offsite, "raw/rd7/rpe1_other/batch_1/RD7_1_features.tsv.gz"),
col.names = c("grna_id", "name", "modality"))
grna_table <- feature_table |> filter(modality == "CRISPR Guide Capture") |> dplyr::select(grna_id)
# reshape vector_info_table
vector_info_table_reshape <- vector_info_table |>
pivot_longer(cols = c("grna_a", "grna_b"), values_to = "grna_id", names_to = NULL)
grna_table_updated <- left_join(x = grna_table, y = vector_info_table_reshape, by = "grna_id") |>
dplyr::arrange(grna_id)
grna_table_updated$grna_target[is.na(grna_table_updated$grna_target)] <- "unknown"
grna_table_updated$vector_id[is.na(grna_table_updated$vector_id)] <- "unknown"
x <- grna_table_updated |>
filter(grna_target != "unknown") |>
mutate(non_targeting = (grna_target == "non-targeting")) |>
group_by(non_targeting) |>
mutate(vector_id_2 = factor(vector_id,
levels = unique(vector_id),
labels = paste0(ifelse(non_targeting[1], "non-targeting_", "targeting_"),
"vector_", seq_along(unique(vector_id))))) |>
arrange(vector_id_2) |>
ungroup() |>
mutate(non_targeting = NULL, vector_id = NULL) |>
rename("vector_id" = "vector_id_2")
x
grna_table_final <- rbind(
x, grna_table_updated |> filter(grna_target == "unknown")
)
grna_table_final
grna_table_final |> head(100)
grna_table_final[1:100,]
grna_table_final
grna_table_final |> dplyr::sample_n(50,)
grna_table_final |> dplyr::sample_n(50)
x <- grna_table_updated |>
filter(grna_target != "unknown") |>
mutate(non_targeting = (grna_target == "non-targeting")) |>
group_by(non_targeting) |>
mutate(vector_id_2 = factor(vector_id,
levels = unique(vector_id),
labels = paste0(ifelse(non_targeting[1], "non-targeting_", "targeting_"),
"vector_", seq_along(unique(vector_id)))) |> as.character()) |>
arrange(vector_id_2) |>
ungroup() |>
mutate(non_targeting = NULL, vector_id = NULL) |>
rename("vector_id" = "vector_id_2")
grna_table_final <- rbind(
x, grna_table_updated |> filter(grna_target == "unknown")
)
grna_table_final
grna_table_final
head(grna_table_final)
tail(grna_table_final)
head(grna_table_final)
grna_table_final
grna_table_final
tail(grna_table_final)
head(grna_table_final)
grna_table_final
grna_table_final[4000:4010]
grna_table_final[4000:4010,]
rlang::last_trace()
grna_table_final
grna_table_final
grna_table_final |> tail()
grna_table_final |> tail(100)
grna_table_final |> tail(100) |> print(n = 100)
grna_table_final$vector_id |> unqieu()
grna_table_final$vector_id |> unique()
grna_table_final$vector_id |> tail() |> unique()
grna_table_final$vector_id |> unique() |> tail(50)
source("~/.Rprofile")
library(tidyverse)
conflicts_prefer(dplyr::filter)
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2022_DATA_DIR"))
vector_info_table <- readxl::read_xlsx(path = paste0(repl_offsite, "raw/mmc1.xlsx"), sheet = 3,
col_names = c("vector_id", "gene_name", "transcript", "grna_target", "grna_a", "target_sequence_a",
"grna_b", "target_sequence_b", "duplicated", "either_duplicated"), skip = 1) |>
select(vector_id, grna_target, grna_a, grna_b)
vector_info_table$grna_a <- paste0(vector_info_table$grna_a, "_posA")
vector_info_table$grna_b <- paste0(vector_info_table$grna_b, "_posB")
feature_table <- data.table::fread(input = paste0(repl_offsite, "raw/rd7/rpe1_other/batch_1/RD7_1_features.tsv.gz"),
col.names = c("grna_id", "name", "modality"))
grna_table <- feature_table |> filter(modality == "CRISPR Guide Capture") |> dplyr::select(grna_id)
grna_table
# reshape vector_info_table
vector_info_table_reshape <- vector_info_table |>
pivot_longer(cols = c("grna_a", "grna_b"), values_to = "grna_id", names_to = NULL)
grna_table_updated <- left_join(x = grna_table, y = vector_info_table_reshape, by = "grna_id") |>
dplyr::arrange(grna_id)
grna_table_updated$grna_target[is.na(grna_table_updated$grna_target)] <- "unknown"
grna_table_updated$vector_id[is.na(grna_table_updated$vector_id)] <- "unknown"
x <- grna_table_updated |>
filter(grna_target != "unknown") |>
mutate(non_targeting = (grna_target == "non-targeting")) |>
group_by(non_targeting) |>
mutate(vector_id_2 = factor(vector_id,
levels = unique(vector_id),
labels = paste0(ifelse(non_targeting[1], "non-targeting_", "targeting_"),
"vector_", seq_along(unique(vector_id)))) |> as.character()) |>
arrange(vector_id_2) |>
ungroup() |>
mutate(non_targeting = NULL, vector_id = NULL) |>
rename("vector_id" = "vector_id_2")
x
nrow(x)
x$vector_id
x$vector_id |> tail()
x$vector_id |> tail(100)
x$vector_id
x$vector_id |> print()
grep("targeting", x$vector_id)
grepl("targeting", x$vector_id)
grepl("targeting", x$vector_id) |> all()
grna_table_updated |> filter(grna_target == "unknown")
library(tidyverse)
conflicts_prefer(dplyr::filter)
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2022_DATA_DIR"))
vector_info_table <- readxl::read_xlsx(path = paste0(repl_offsite, "raw/mmc1.xlsx"), sheet = 3,
col_names = c("vector_id", "gene_name", "transcript", "grna_target", "grna_a", "target_sequence_a",
"grna_b", "target_sequence_b", "duplicated", "either_duplicated"), skip = 1) |>
select(vector_id, grna_target, grna_a, grna_b)
vector_info_table$grna_a <- paste0(vector_info_table$grna_a, "_posA")
vector_info_table$grna_b <- paste0(vector_info_table$grna_b, "_posB")
feature_table <- data.table::fread(input = paste0(repl_offsite, "raw/rd7/rpe1_other/batch_1/RD7_1_features.tsv.gz"),
col.names = c("grna_id", "name", "modality"))
grna_table <- feature_table |> filter(modality == "CRISPR Guide Capture") |> dplyr::select(grna_id)
grna_table
# reshape vector_info_table
vector_info_table_reshape <- vector_info_table |>
pivot_longer(cols = c("grna_a", "grna_b"), values_to = "grna_id", names_to = NULL)
grna_table_updated <- left_join(x = grna_table, y = vector_info_table_reshape, by = "grna_id") |>
dplyr::arrange(grna_id)
grna_table_updated
grna_table_updated
grna_table_updated$grna_target[is.na(grna_table_updated$grna_target)] <- "unknown"
grna_table_updated$vector_id[is.na(grna_table_updated$vector_id)] <- "unknown"
grna_table_updated
grna_table_updated
grna_table_updated |> filter(vector_id == "6828_PRSS50_P2_nan")
grna_table
vector_info_table
vector_info_table |> filter(vector_id == "6828_PRSS50_P2_nan")
vector_info_table <- readxl::read_xlsx(path = paste0(repl_offsite, "raw/mmc1.xlsx"), sheet = 3,
col_names = c("vector_id", "gene_name", "transcript", "grna_target", "grna_a", "target_sequence_a",
"grna_b", "target_sequence_b", "duplicated", "either_duplicated"), skip = 1) |>
select(vector_id, grna_target, grna_a, grna_b)
vector_info_table |> filter(vector_id == "6828_PRSS50_P2_nan")
vector_info_table
vector_info_table <- readxl::read_xlsx(path = paste0(repl_offsite, "raw/mmc1.xlsx"), sheet = 3,
col_names = c("vector_id", "gene_name", "transcript", "grna_target", "grna_a", "target_sequence_a",
"grna_b", "target_sequence_b", "duplicated", "either_duplicated"), skip = 1) |>
select(vector_id, grna_target, grna_a, grna_b)
View(vector_info_table)
# reshape vector_info_table
vector_info_table_reshape <- vector_info_table |>
pivot_longer(cols = c("grna_a", "grna_b"), values_to = "grna_id", names_to = NULL)
grna_table_updated <- left_join(x = grna_table, y = vector_info_table_reshape, by = "grna_id") |>
dplyr::arrange(grna_id)
is.na(grna_table_updated$grna_target)
which(is.na(grna_table_updated$grna_target))
is.na(grna_table_updated$grna_target)
grna_table_updated$grna_target |> head()
source("~/.Rprofile")
library(tidyverse)
conflicts_prefer(dplyr::filter)
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2022_DATA_DIR"))
vector_info_table <- readxl::read_xlsx(path = paste0(repl_offsite, "raw/mmc1.xlsx"), sheet = 3,
col_names = c("vector_id", "gene_name", "transcript", "grna_target", "grna_a", "target_sequence_a",
"grna_b", "target_sequence_b", "duplicated", "either_duplicated"), skip = 1) |>
select(vector_id, grna_target, grna_a, grna_b)
vector_info_table$grna_a <- paste0(vector_info_table$grna_a, "_posA")
vector_info_table$grna_b <- paste0(vector_info_table$grna_b, "_posB")
feature_table <- data.table::fread(input = paste0(repl_offsite, "raw/rd7/rpe1_other/batch_1/RD7_1_features.tsv.gz"),
col.names = c("grna_id", "name", "modality"))
grna_table <- feature_table |> filter(modality == "CRISPR Guide Capture") |> dplyr::select(grna_id)
grna_table
head(grna_table)
# reshape vector_info_table
vector_info_table_reshape <- vector_info_table |>
pivot_longer(cols = c("grna_a", "grna_b"), values_to = "grna_id", names_to = NULL)
grna_table_updated <- left_join(x = grna_table, y = vector_info_table_reshape, by = "grna_id") |>
dplyr::arrange(grna_id)
grna_table_updated
is.na(grna_table_updated$grna_target)
which(is.na(grna_table_updated$grna_target))
which(is.na(grna_table_updated$vector_id))
na_grnas <- is.na(grna_table_updated$grna_target) | is.na(grna_table_updated$vector_id)
grna_table_updated$grna_target[na_grnas] <- "unknown"
grna_table_updated$vector_id[na_grnas] <- "unknown"
x <- grna_table_updated |>
filter(grna_target != "unknown") |>
mutate(non_targeting = (grna_target == "non-targeting")) |>
group_by(non_targeting) |>
mutate(vector_id_2 = factor(vector_id,
levels = unique(vector_id),
labels = paste0(ifelse(non_targeting[1], "non-targeting_", "targeting_"),
"vector_", seq_along(unique(vector_id)))) |> as.character()) |>
arrange(vector_id_2) |>
ungroup() |>
mutate(non_targeting = NULL, vector_id = NULL) |>
rename("vector_id" = "vector_id_2")
grna_table_final <- rbind(x, grna_table_updated |> filter(grna_target == "unknown"))
grna_table_final
grna_table_final$vector_id
grna_table_final$vector_id |> unique()
View(grna_table_final)
grna_table_final
View(grna_table_final)
repl_offsite
repl_offsite
repl_offsite
# save result
saveRDS(object = grna_table_final,
file = paste(repl_offsite, "raw/rd7/grna_table.rds"))
# save result
saveRDS(object = grna_table_final,
file = paste0(repl_offsite, "raw/rd7/grna_table.rds"))
grna_table_final
x <- readRDS("/Users/timbarry/research_offsite/external/replogle-2022/raw/rd7/grna_table.rds")
x
library(sceptre)
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2022_DATA_DIR"))
rm(x)
source("~/.Rprofile")
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2022_DATA_DIR"))
repl_offsite
repl_offsite
directory_dir <- paste0(repl_offsite, "raw/rd7/rpe1_other/")
directory_dir
list.files(directory_dir)
directories <- list.files(directory_dir)
directories
grna_target_data_frame
grna_target_data_frame <- readRDS(paste0(repl_offsite, "raw/rd7/grna_table.rds"))
grna_target_data_frame
head(grna_target_data_frame)
library(sceptre)
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2022_DATA_DIR"))
directory_dir <- paste0(repl_offsite, "raw/rd7/rpe1_other/")
directories <- list.files(directory_dir)[1:3] # load only first three directories for now
grna_target_data_frame <- readRDS(paste0(repl_offsite, "raw/rd7/grna_table.rds"))
directory_to_write <- paste0(repl_offsite, "processed/rd7")
directory_to_write
sceptre_object <- import_data_from_cellranger(directories = directories,
moi = "low",
grna_target_data_frame = grna_target_data_frame,
use_ondisc = TRUE,
directory_to_write = directory_to_write)
directories <- list.files(directory_dir, full.names = TRUE)[1:3] # load only first three directories for now
# create the sceptre object
sceptre_object <- import_data_from_cellranger(directories = directories,
moi = "low",
grna_target_data_frame = grna_target_data_frame,
use_ondisc = TRUE,
directory_to_write = directory_to_write)
sceptre_object
sceptre_object
#
plot_covariates(sceptre_object)
plot_grna_count_distributions(sceptre_object)
# set the analysis parameters
positive_control_pairs <- construct_positive_control_pairs(sceptre_object)
positive_control_pairs
head(positive_control_pairs)
tail(positive_control_pairs)
nrow(positive_control_pairs)
positive_control_pairs
?construct_trans_pairs
discovery_pairs <- construct_trans_pairs(sceptre_object, positive_control_pairs, "pc_pairs") |> dplyr::sample(500000)
discovery_pairs <- construct_trans_pairs(sceptre_object, positive_control_pairs, "pc_pairs") |> dplyr::sample_n(500000)
pryr::object_size(discovery_pairs)
head(discovery_pairs)
tail(discovery_pairs)
nrow(discovery_pairs)
discovery_pairs
head(discovery_pairs)
discovery_pairs
sceptre_object <- sceptre_object |>
set_analysis_parameters(discovery_pairs = discovery_pairs,
positive_control_pairs = positive_control_pairs)
sceptre_object
sceptre_object |> print()
sceptre_object
sceptre_object@discovery_pairs |> head()
sceptre_object@discovery_pairs$grna_group |> head()
# save the sceptre_object
write_ondisc_backed_sceptre_object(sceptre_object = sceptre_object,
sceptre_object_fp = paste0(repl_offsite, "processed/rd7/sceptre_object.rds"))
